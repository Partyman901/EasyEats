version: '3.8'

services:

  zookeeper:
    image: wurstmeister/zookeeper
    restart: always
    ports:
      - "2181"
    hostname: zookeeper
    volumes:
      - /home/azureuser/zookeeper/data:/opt/zookeeper-3.4.13/data

  kafka:
    image: wurstmeister/kafka
    restart: always
    command: [ start-kafka.sh ]
    ports:
      - "9092:9092"
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1" # topic:partition:replicas
      KAFKA_ADVERTISED_HOST_NAME: easyeats.eastus.cloudapp.azure.com # docker-machine ip
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://easyeats.eastus.cloudapp.azure.com:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOGS_DIRS: /kafka/kafka-logs
      KAFKA_BROKER_ID: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/azureuser/kafka:/kafka/kafka-logs
    depends_on:
      - "zookeeper"

  db:
    image: mysql:5.7 
    restart: always 
    environment: 
      MYSQL_DATABASE: 'events' 
      MYSQL_USER: 'user' 
      MYSQL_PASSWORD: 'password' 
      MYSQL_ROOT_PASSWORD: 'password' 
    ports: 
      - '3306:3306' 
    expose: 
      - '3306' 
    volumes: 
      - my-db:/var/lib/mysql    
      
  receiver:
    build: ../receiver
    image: receiver
    container_name: receiver
    ports: 
      - '8080'
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/receiver:/config
      - /home/azureuser/logs:/logs
    depends_on:
      - "kafka"
    networks:
      - api.network
    
  storage:
    build: ../storage
    image: storage
    container_name: storage
    ports: 
      - '8090'
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/storage:/config
      - /home/azureuser/logs:/logs
    depends_on:
      - "kafka"
      - "db"
    networks:
      - api.network

  processing:
    build: ../processing
    image: processing
    container_name: processing
    ports:
      - '8100'
    environment:
      - TARGET_ENV=test
    depends_on:
      - "kafka"
      - "storage"
    volumes:
      - processing-db:/data
      - /home/azureuser/logs:/logs
      - /home/azureuser/config/processing:/config
    networks:
      - api.network

  audit_log:
    build: ../audit_log
    image: audit_log
    container_name: audit_log
    ports: 
      - '8110'
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/logs:/logs
      - /home/azureuser/config/audit_log:/config
    depends_on:
      - "kafka"
    networks:
      - api.network

  dashboard-ui:
    build: ../dashboard-ui
    image: dashboard
    ports:
    - "3000"
    depends_on:
    - "processing"
    - "audit_log"
    networks:
      - api.network

  nginx:
    image: nginx:latest
    # Connects the conf file of the container to the conf file in our folder
    volumes:
    - /home/azureuser/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    # It will start up the nginx only when all api containers have started
    depends_on:
    - "receiver"
    - "storage"
    - "processing"
    - "audit_log"
    - "dashboard-ui"
    # Connects the port 80 of the nginx container to localhost:80 or localhost
    ports:
    - "80:80"
    networks:
    - "api.network"

volumes:
  my-db:
  processing-db:

networks:
  api.network:
